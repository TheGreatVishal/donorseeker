generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  firstname           String
  lastname            String               @default("")
  email               String               @unique
  password            String
  contact             String
  isAdmin             Boolean              @default(false)
  verified            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  donationCount       Int                  @default(0)
  totalRating         Int                  @default(0)
  ratingCount         Int                  @default(0)
  donationListings    DonationListing[]
  sentRequests        DonationRequest[]    @relation("UserSentRequests")
  givenFeedback       Feedback[]           @relation("GivenFeedback")
  receivedFeedback    Feedback[]           @relation("ReceivedFeedback")
  requirementListings RequirementListing[]
  donations           Transaction[]        @relation("UserDonations")
  receivedDonations   Transaction[]        @relation("UserReceivedDonations")
}

model OTPVerification {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  expiresAt DateTime
}

model DonationListing {
  id           Int               @id @default(autoincrement())
  title        String
  description  String
  category     String
  condition    Condition
  imageUrls    String[]
  contact      String
  status       ListingStatus     @default(PENDING)
  isApproved   Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  requests     DonationRequest[]
  transactions Transaction[]
}

model RequirementListing {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    String
  urgency     UrgencyLevel  @default(NORMAL)
  imageUrls   String[]
  contact     String
  status      ListingStatus @default(PENDING)
  isApproved  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
}

model DonationRequest {
  id           Int             @id @default(autoincrement())
  message      String
  status       RequestStatus   @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  seekerId     Int
  listingId    Int
  listing      DonationListing @relation(fields: [listingId], references: [id])
  seeker       User            @relation("UserSentRequests", fields: [seekerId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          Int             @id @default(autoincrement())
  completedAt DateTime        @default(now())
  isReceived  Boolean         @default(false)
  listingId   Int
  requestId   Int
  donorId     Int
  receiverId  Int
  feedback    Feedback?
  donor       User            @relation("UserDonations", fields: [donorId], references: [id])
  listing     DonationListing @relation(fields: [listingId], references: [id])
  receiver    User            @relation("UserReceivedDonations", fields: [receiverId], references: [id])
  request     DonationRequest @relation(fields: [requestId], references: [id])
}

model Feedback {
  id            Int         @id @default(autoincrement())
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  transactionId Int         @unique
  giverId       Int
  receiverId    Int
  giver         User        @relation("GivenFeedback", fields: [giverId], references: [id])
  receiver      User        @relation("ReceivedFeedback", fields: [receiverId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Logging {
  id              Int      @id @default(autoincrement())
  timestamp       DateTime @default(now())
  ipAddress       String
  userEmail       String?
  section         String
  apiEndpoint     String
  requestType     String
  statusCode      Int
  description     String?
  browser         String?
  geoLocation     String?
  operatingSystem String?
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  DONATED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Condition {
  NEW
  USED
  GOOD
  FAIR
  BAD
}

enum UrgencyLevel {
  LOW
  NORMAL
  HIGH
  URGENT
}
