generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String   @default("")
  email     String   @unique
  password  String
  contact   String
  isAdmin   Boolean  @default(false) // USER = false, ADMIN = true
  verified  Boolean  @default(false) // True if email is verified
  createdAt DateTime @default(now())

  // Leaderboard statistics
  donationCount Int @default(0) // Track number of completed donations
  totalRating   Int @default(0) // Sum of all ratings received
  ratingCount   Int @default(0) // Number of ratings received

  // User can create both donation listings and requirement listings
  donationListings    DonationListing[]
  requirementListings RequirementListing[]

  // User can make requests on donation listings
  sentRequests DonationRequest[] @relation("UserSentRequests")

  // User can receive feedback after donating
  receivedFeedback Feedback[] @relation("ReceivedFeedback")
  givenFeedback    Feedback[] @relation("GivenFeedback")

  // Donations made by this user
  donations Transaction[] @relation("UserDonations")

  // Donations received by this user
  receivedDonations Transaction[] @relation("UserReceivedDonations")
}

model OTPVerification {
  id        Int      @id @default(autoincrement())
  email     String   @unique // Ensures only one OTP per email
  otp       String
  expiresAt DateTime
}

// Base listing type with common fields
model DonationListing {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    String
  condition   Condition
  imageUrls   String[]
  contact     String
  status      ListingStatus @default(PENDING)
  isApproved  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relation to the user who created this donation listing
  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Requests from users who want this donation
  requests DonationRequest[]

  // Transactions that resulted from this listing
  transactions Transaction[]
}

// Requirement listings (what users need)
model RequirementListing {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  category    String
  urgency     UrgencyLevel  @default(NORMAL)
  imageUrls   String[]
  contact     String
  status      ListingStatus @default(PENDING)
  isApproved  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relation to the user who created this requirement listing
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

// Requests for donations
model DonationRequest {
  id        Int           @id @default(autoincrement())
  message   String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relation to the user who made the request
  seekerId Int
  seeker   User @relation("UserSentRequests", fields: [seekerId], references: [id])

  // Relation to the donation listing
  listingId Int
  listing   DonationListing @relation(fields: [listingId], references: [id])

  // Transactions that resulted from this request
  transactions Transaction[]
}

// Completed donations
model Transaction {
  id          Int      @id @default(autoincrement())
  completedAt DateTime @default(now())
  isReceived  Boolean  @default(false)

  // Relation to the donation listing
  listingId Int
  listing   DonationListing @relation(fields: [listingId], references: [id])

  // Relation to the request that led to this transaction
  requestId Int
  request   DonationRequest @relation(fields: [requestId], references: [id])

  // Relations to the users involved in the transaction
  donorId Int
  donor   User @relation("UserDonations", fields: [donorId], references: [id])

  receiverId Int
  receiver   User @relation("UserReceivedDonations", fields: [receiverId], references: [id])

  // Feedback for this transaction
  feedback Feedback?
}

// Feedback after receiving items
model Feedback {
  id        Int      @id @default(autoincrement())
  rating    Int // 1-5 star rating
  comment   String?
  createdAt DateTime @default(now())

  // Relation to the transaction
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  // Relations to the users involved
  giverId Int // User who gave feedback (receiver of donation)
  giver   User @relation("GivenFeedback", fields: [giverId], references: [id])

  receiverId Int // User who received feedback (donor)
  receiver   User @relation("ReceivedFeedback", fields: [receiverId], references: [id])
}

model Logging {
  id           Int      @id @default(autoincrement()) 
  timestamp    DateTime @default(now()) 
  ipAddress    String   
  userEmail    String?  // if logged in
  section      String   
  apiEndpoint  String   
  requestType  String   
  statusCode   Int      
  description  String?  
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  DONATED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Condition {
  NEW
  USED
  GOOD
  FAIR
  BAD
}

enum UrgencyLevel {
  LOW
  NORMAL
  HIGH
  URGENT
}
